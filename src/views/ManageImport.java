/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import common.MessageDialog;
import dao.StaffDAO;
import models.Staff;
import models.Import;
import models.Distributor;
import dao.DistributorDAO;
import dao.ImportDAO;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import models.ImportDetail;
import services.DistributorService;
import services.ImportService;
import services.StaffService;

/**
 *
 * @author gialo
 */
public class ManageImport extends javax.swing.JFrame {

    /**
     * Creates new form ManageStudent
     */
    private int teacherId = -200;

    public ManageImport() {
        initComponents();
        setLocationRelativeTo(null);
        loadComboBox();
        initializeTable();
    }

    public ManageImport(int index) {
        initComponents();
        this.teacherId = index;
        setLocationRelativeTo(null);
        loadComboBox();
        initializeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        importTable = new javax.swing.JTable();
        btn_add = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        codeInput = new javax.swing.JTextField();
        nameInput = new javax.swing.JTextField();
        startDateInput = new javax.swing.JTextField();
        cboDis = new javax.swing.JComboBox<>();
        nameProductInput = new javax.swing.JTextField();
        cboStaff = new javax.swing.JComboBox<>();
        priceInput = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        codeProductInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        quantityInput = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionInput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý phiếu nhập hàng");

        btn_back.setText("Trở lại trang chủ");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Quản lí phiếu nhập hàng");

        importTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        importTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(importTable);

        btn_add.setText("Thêm");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_edit.setText("Sửa");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setText("Xóa");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_clear.setText("Nhập lại");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        jLabel9.setText("Mã phiếu nhập:");

        jLabel10.setText("Tên phiếu nhập:");

        jLabel11.setText("Mô tả:");

        jLabel12.setText("Ngày nhập: ");

        jLabel13.setText("Đối tác:");

        jLabel14.setText("Mã Sản Phẩm:");

        jLabel15.setText("Tên Sản Phẩm:");

        jLabel16.setText("Giá nhập:");

        codeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeInputActionPerformed(evt);
            }
        });

        cboDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDisActionPerformed(evt);
            }
        });

        nameProductInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameProductInputActionPerformed(evt);
            }
        });

        cboStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboStaffActionPerformed(evt);
            }
        });

        jLabel17.setText("Nhân viên thủ kho:");

        jLabel2.setText("Số lượng:");

        quantityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityInputActionPerformed(evt);
            }
        });

        descriptionInput.setColumns(20);
        descriptionInput.setRows(5);
        jScrollPane2.setViewportView(descriptionInput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(codeInput)
                                    .addComponent(nameInput)
                                    .addComponent(startDateInput)
                                    .addComponent(cboDis, 0, 304, Short.MAX_VALUE)
                                    .addComponent(nameProductInput)
                                    .addComponent(cboStaff, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceInput)
                                    .addComponent(codeProductInput, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(quantityInput)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_back)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboDis, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codeProductInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameProductInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(quantityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jLabel14.getAccessibleContext().setAccessibleName("Người đại diện doanh nghiệp:");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        clearAllFields();
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed

        dispose();
        Home homeScreen = new Home();
        homeScreen.setLocationRelativeTo(null);
        homeScreen.setVisible(true);
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        try {
            String importName = this.nameInput.getText().trim();
            String importCode = this.codeInput.getText().trim();
            String importDes = this.descriptionInput.getText().trim();
            String importDate = this.startDateInput.getText().trim();
            String codeProduct = this.codeProductInput.getText().trim();
            String nameProduct = this.nameProductInput.getText().trim();
            int priceImport = Integer.parseInt(this.priceInput.getText().trim());
            int quantityImport = Integer.parseInt(this.quantityInput.getText().trim());
            String distributorName = cboDis.getSelectedItem().toString();
            String staffName = cboStaff.getSelectedItem().toString();

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate inputDate = LocalDate.parse(importDate, formatter);
            LocalDate currentDate = LocalDate.now();
            if (importName.equalsIgnoreCase("")) {
                MessageDialog.showInfoDialog(this, "Tên phiếu nhập không được để trống", "Thông báo");
                return;
            }
            if (importCode.equalsIgnoreCase("")) {
                MessageDialog.showInfoDialog(this, "Mã phiếu nhập không được để trống", "Thông báo");
                return;
            }
            if (importDate.equalsIgnoreCase("")) {
                MessageDialog.showInfoDialog(this, "Ngày nhập không được để trống", "Thông báo");
                return;
            }
            if (currentDate.compareTo(inputDate) <= 0) {
                MessageDialog.showInfoDialog(this, "Ngày nhập phải lớn hơn ngày hiện tại", "Thông báo");
                return;
            }
            if (importDes.equalsIgnoreCase("")) {
                MessageDialog.showInfoDialog(this, "Mô tả không được để trống", "Thông báo");
                return;
            }
            if (priceImport <= 0) {
                MessageDialog.showInfoDialog(this, "Giá nhập không hợp lệ", "Thông báo");
                return;
            }
            if (quantityImport <= 0) {
                MessageDialog.showInfoDialog(this, "Số lượng nhập không hợp lệ", "Thông báo");
                return;
            }
            if (ImportService.isExistedImportCode(importCode)) {
                MessageDialog.showInfoDialog(this, "Trùng mã phiếu nhập", "Thông báo");
            } else {
                ImportService.createNewImport(importCode, importName, importDes, importDate, distributorName, staffName, codeProduct, nameProduct, quantityImport, priceImport);
                loadTableData();
                MessageDialog.showInfoDialog(this, "Thêm thành công", "Thông báo");
                clearAllFields();
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Có lỗi xảy ra khi thêm mới, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        try {
            int index = importTable.getSelectedRow();
            if (index == -1) {
                MessageDialog.showInfoDialog(this, "Vui lòng chọn một phiếu nhập", "Thông báo");
                return;
            }

            // Lấy dữ liệu từ các ô nhập
            String importName = this.nameInput.getText().trim();
            String importCode = this.codeInput.getText().trim();
            String importDes = this.descriptionInput.getText().trim();
            String importDate = this.startDateInput.getText().trim();
            String productName = this.nameProductInput.getText().trim();
            String productCode = this.codeProductInput.getText().trim();
            double priceImport = Double.parseDouble(this.priceInput.getText().trim());
            int quantity = Integer.parseInt(this.quantityInput.getText().trim());
            String disName = cboDis.getSelectedItem().toString();
            String staffName = cboStaff.getSelectedItem().toString();

            // Kiểm tra dữ liệu đầu vào
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate inputDate = LocalDate.parse(importDate, formatter);
            LocalDate currentDate = LocalDate.now();

            if (importName.isEmpty()) {
                MessageDialog.showInfoDialog(this, "Tên phiếu nhập không được để trống", "Thông báo");
                return;
            }
            if (importCode.isEmpty()) {
                MessageDialog.showInfoDialog(this, "Mã phiếu nhập không được để trống", "Thông báo");
                return;
            }
            if (importDate.isEmpty()) {
                MessageDialog.showInfoDialog(this, "Ngày nhập không được để trống", "Thông báo");
                return;
            }
            if (currentDate.compareTo(inputDate) <= 0) {
                MessageDialog.showInfoDialog(this, "Ngày nhập phải nhỏ hơn ngày hiện tại", "Thông báo");
                return;
            }
            if (priceImport <= 0) {
                MessageDialog.showInfoDialog(this, "Giá nhập không hợp lệ", "Thông báo");
                return;
            }
            if (quantity <= 0) {
                MessageDialog.showInfoDialog(this, "Số lượng nhập không hợp lệ", "Thông báo");
                return;
            }

            // Cập nhật dữ liệu Import
            Import selectedImport = ImportService.getImportByIndex(index);
            selectedImport.setName(importName);
            selectedImport.setCode(importCode);
            selectedImport.setDescription(importDes);
            selectedImport.setCreateDate(importDate);

            // Cập nhật dữ liệu ImportDetail
            List<ImportDetail> importDetailData = ImportDAO.readImportDetailsFromFile();
            ImportDetail selectedImportDetail = null;

            for (ImportDetail data : importDetailData) {
                if (data.getImportCode().equals(importCode)) {
                    selectedImportDetail = data;
                    break;
                }
            }

            if (selectedImportDetail != null) {
                selectedImportDetail.setDistributorName(disName);
                selectedImportDetail.setStaffName(staffName);
                selectedImportDetail.setProductCode(productCode);
                selectedImportDetail.setProductName(productName);

                selectedImportDetail.setQuantity(quantity);
                selectedImportDetail.setPriceImport(priceImport);

                // Lưu dữ liệu đã chỉnh sửa
                ImportService.updateImport(selectedImport, selectedImportDetail);
                MessageDialog.showInfoDialog(this, "Cập nhật thông tin thành công!", "Thông báo");
                clearAllFields();
                loadTableData();
            } else {
                MessageDialog.showInfoDialog(this, "Không tìm thấy chi tiết phiếu nhập tương ứng", "Thông báo");
            }

        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Xảy ra lỗi khi sửa thông tin phiếu nhập, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Phát hiện lỗi");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void importTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importTableMouseClicked
        try {
            int index = importTable.getSelectedRow();
            if (index == -1) {
                MessageDialog.showInfoDialog(this, "Vui lòng chọn một phiếu nhập", "Thông báo");
                return;
            }

            Import selectedImport = ImportService.getImportByIndex(index);
            String importCode = selectedImport.getCode();

            // Hiển thị dữ liệu của Import lên các ô nhập
            nameInput.setText(selectedImport.getName());
            codeInput.setText(selectedImport.getCode());
            descriptionInput.setText(selectedImport.getDescription());
            startDateInput.setText(selectedImport.getCreateDate());

            // Lấy dữ liệu từ ImportDetail
            List<ImportDetail> importDetailData = ImportDAO.readImportDetailsFromFile();
            for (ImportDetail detail : importDetailData) {
                if (detail.getImportCode().equals(importCode)) {
                    nameProductInput.setText(detail.getProductName());
                    codeProductInput.setText(detail.getProductCode());
                    priceInput.setText(String.valueOf(detail.getPriceImport()));
                    quantityInput.setText(String.valueOf(detail.getQuantity()));
                    cboDis.setSelectedItem(detail.getDistributorName());
                    cboStaff.setSelectedItem(detail.getStaffName());
                    break; // Chỉ lấy chi tiết phiếu nhập đầu tiên tìm thấy
                }
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Có lỗi xảy ra khi lấy thông tin chi tiết phiếu nhập, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_importTableMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        try {
            int index = importTable.getSelectedRow();
            if (index == -1) {
                MessageDialog.showInfoDialog(this, "Vui lòng chọn một phiếu nhập", "Thông báo");
                return;
            }
            Import selectedImport = ImportService.getImportByIndex(index);
            int keyPress = MessageDialog.showConfirmDialog(this, "Bạn có chắc muốn xóa phiếu nhập này?", "Xác nhận");
            if (keyPress == 0) { // Nếu người dùng xác nhận xóa
                ImportService.deleteImport(selectedImport.getId()); // Xóa phiếu nhập và chi tiết phiếu nhập tương ứng
                loadTableData(); // Cập nhật bảng
                clearAllFields(); // Xóa dữ liệu trong các ô nhập
                MessageDialog.showInfoDialog(this, "Đã xóa phiếu nhập và chi tiết phiếu nhập thành công!", "Thông báo");
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Xảy ra lỗi khi xóa phiếu nhập, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Phát hiện lỗi");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void cboDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDisActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cboDisActionPerformed

    private void quantityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityInputActionPerformed

    private void nameProductInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameProductInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameProductInputActionPerformed

    private void cboStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboStaffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboStaffActionPerformed

    private void codeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codeInputActionPerformed

    private void clearAllFields() {
        codeInput.setText("");
        nameInput.setText("");
        descriptionInput.setText("");
        startDateInput.setText("");
        nameProductInput.setText("");
        codeProductInput.setText("");
        priceInput.setText("");
        quantityInput.setText("");
    }

    private DefaultTableModel tableModel;

    private void loadComboBox() {
        try {
            // Đọc danh sách nhân viên từ tệp
            List<Staff> staffList = StaffDAO.readFromFile();

            // Xóa các mục cũ trong combobox
            cboStaff.removeAllItems();

            // Thêm tên của nhân viên thủ kho vào combobox
            for (Staff staff : staffList) {
                if ("Nhân viên thủ kho".equals(staff.getPosition())) {
                    cboStaff.addItem(staff.getLastName() + " " + staff.getFirstName());
                }
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Đã xảy ra lỗi khi tải danh sách nhân viên từ tệp: " + ex.getMessage(), "Lỗi");
            ex.printStackTrace();
        }

        try {
            // Đọc danh sách nhà phân phối từ tệp
            List<Distributor> distributors = DistributorDAO.readFromFile();

            // Xóa các mục cũ trong combobox
            cboDis.removeAllItems();

            // Thêm tên của từng nhà phân phối vào combobox
            for (Distributor distributor : distributors) {
                cboDis.addItem(distributor.getFirstName());
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Đã xảy ra lỗi khi tải danh sách nhà phân phối từ tệp: " + ex.getMessage(), "Lỗi");
            ex.printStackTrace();
        }

    }

    private void loadTableData() {
        try {
            List<Import> import_data = ImportService.getAllImports();
            List<Distributor> dis_data = DistributorService.getAllDistributors();
            tableModel.setRowCount(0);
            if (import_data != null) {
                for (Import impor : import_data) {
                    tableModel.addRow(new Object[]{impor.getCode(),
                        impor.getName(),
                        impor.getDescription(),
                        impor.getCreateDate()});
                }
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    private void initializeTable() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã phiếu nhập", "Tên phiếu nhập", "Mô tả",
            "Ngày nhập"});
        importTable.setModel(tableModel);
        if (teacherId >= 0) {
            btn_delete.setEnabled(false);
            btn_back.setText("Quay lại trang trước");
        }
        loadTableData();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageImport.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageImport.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageImport.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageImport.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManageImport().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JComboBox<Object> cboDis;
    private javax.swing.JComboBox<Object> cboStaff;
    private javax.swing.JTextField codeInput;
    private javax.swing.JTextField codeProductInput;
    private javax.swing.JTextArea descriptionInput;
    private javax.swing.JTable importTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameInput;
    private javax.swing.JTextField nameProductInput;
    private javax.swing.JTextField priceInput;
    private javax.swing.JTextField quantityInput;
    private javax.swing.JTextField startDateInput;
    // End of variables declaration//GEN-END:variables
}
